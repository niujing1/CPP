Base---基础知识点
 -- 基本数据类型的引用
 -- 结构体的引用
 -- 指针类型的引用
 -- 函数参数的引用
 -- const与基本数据类型
 -- const与指针类型的关系

package1---封装(上)
 -- 实例化一个C++类文件
 -- String常用操作
 -- 面向对象的基本思想，使用类的方法，去访问类的数据成员
 -- 内联函数和类内定义
 -- 使用类的封装去设置类属性
 -- 构造函数，可以重载，自动调用且仅调用一次
 -- 初始化列表会在构造函数之前执行，只能用于构造函数，可以同时初始化多个属性
 -- copy构造函数及析构函数介绍

 package2---封装(下)
  -- 实例化对象数组
  -- 对象成员
  -- 浅copy
  -- 深copy
  -- 对象指针
  -- 对象成员指针
  -- this指针
  -- const 常成员函数要通过常对象来调用

  extend --继承
   -- 共有继承 public
   -- 保护继承 protected
   -- 隐藏和覆盖 父子关系  成员同名 隐藏
   -- 多重继承(B->A c->B)  多继承(C->A B)

Polymorphism --多态
  -- 静态多态(早绑定)  //虚析构函数 有virtual关键字修饰的析构函数
  早绑定就是类似重载那样，在new 的时候就知道要使用的是哪一个成员函数
  晚绑定就是类似接口，用虚函数去实现，在new的时候，并不知道是要用哪一个类，
  而是根据传入对象来确定
  1)不能修饰静态成员函数  2）不能修饰内联函数，它会让计算机忽略inline 3）构造函数不能成为虚函数
  -- 纯虚函数
  -- 接口类
  -- RTTI 运行时类型识别

template -- 模板
  -- 友元函数(全局函数 成员函数) A要访问B的私有成员，就必须B将其声明为友元函数才可以
  -- 友元成员函数，注意一点 友元函数不受访问属性的限制，
     放到类的最前边或者public protected  private等下边都可以，一般放在最前边
  -- 友元类
  -- 静态类
  -- 一元运算符重载(-号  ++)
  -- 二元运算符重载(+号 ) 成员函数方式和友元函数方式实现
  -- 函数模板 template typename class(表明数据类型)
  -- 类模板

STL -- C++标准模板库
  -- 向量 本质是对数组的封装
  -- map数据成对出现
  -- list